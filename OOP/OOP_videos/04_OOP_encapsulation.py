# ======================================================
# OOP Python ‚Äì Encapsulation (T√≠nh ƒë√≥ng g√≥i)
# ======================================================
# ‚úî ƒê√¢y l√† m·ªôt trong 4 t√≠nh ch·∫•t quan tr·ªçng c·ªßa OOP.
# ‚úî M·ª•c ti√™u: ·∫®n d·ªØ li·ªáu n·ªôi b·ªô b√™n trong class, kh√¥ng cho truy c·∫≠p tr·ª±c ti·∫øp t·ª´ b√™n ngo√†i.
# ‚úî Thay v√†o ƒë√≥, ch·ªâ ƒë∆∞·ª£c ph√©p truy c·∫≠p ho·∫∑c thay ƒë·ªïi th√¥ng qua c√°c ph∆∞∆°ng th·ª©c (method) do l·∫≠p tr√¨nh vi√™n quy ƒë·ªãnh.

# =============================================
# üß† V√≠ d·ª• d·ªÖ hi·ªÉu:
# - M·ªôt t√†i kho·∫£n ng√¢n h√†ng kh√¥ng cho ng∆∞·ªùi kh√°c s·ª≠a s·ªë d∆∞ tr·ª±c ti·∫øp.
# - Mu·ªën thay ƒë·ªïi s·ªë d∆∞ th√¨ ph·∫£i n·∫°p ti·ªÅn (deposit) ho·∫∑c r√∫t ti·ªÅn (withdraw), v√† c·∫ßn c√≥ ƒëi·ªÅu ki·ªán ki·ªÉm tra.
# ‚Üí ƒê√≥ ch√≠nh l√† ƒë√≥ng g√≥i d·ªØ li·ªáu.

# =============================================
# üíº ·ª®ng d·ª•ng th·ª±c t·∫ø khi ƒëi l√†m:
# - ·ªû Tiki, Shopee: th√¥ng tin ng∆∞·ªùi d√πng nh∆∞ m·∫≠t kh·∫©u ph·∫£i ƒë∆∞·ª£c ·∫©n, ch·ªâ thay ƒë·ªïi qua h√†m ƒë·ªïi m·∫≠t kh·∫©u.
# - ·ªû MoMo, ZaloPay: s·ªë d∆∞ v√≠ ƒëi·ªán t·ª≠ ƒë∆∞·ª£c ƒë√≥ng g√≥i, kh√¥ng cho truy c·∫≠p tr·ª±c ti·∫øp.
# - ·ªû OpenAI: token API ph·∫£i ƒë∆∞·ª£c ·∫©n v√† ch·ªâ ki·ªÉm tra quota qua c√°c h√†m n·ªôi b·ªô.
# - ·ªû AWS: tr·∫°ng th√°i c·ªßa m√°y ch·ªß EC2 (running/stopped) kh√¥ng th·ªÉ b·ªã ƒë·ªïi tr·ª±c ti·∫øp t·ª´ ngo√†i.
# - ·ªû Microsoft Teams: th√¥ng tin nh√¢n vi√™n ƒë∆∞·ª£c qu·∫£n l√Ω qua h√†m hi·ªÉn th·ªã v√† c·∫≠p nh·∫≠t an to√†n.

# =============================================
# üìå K·∫øt lu·∫≠n:
# - Encapsulation gi√∫p ph·∫ßn m·ªÅm an to√†n h∆°n, d·ªÖ ki·ªÉm so√°t logic h∆°n, v√† tr√°nh l·ªói do ng∆∞·ªùi kh√°c ch·ªânh b·∫≠y.
# - ƒê√¢y l√† **vƒÉn ho√° l·∫≠p tr√¨nh chuy√™n nghi·ªáp** m√† b·∫°n nh·∫•t ƒë·ªãnh ph·∫£i n·∫Øm v·ªØng n·∫øu mu·ªën l√†m vi·ªác trong c√°c c√¥ng ty l·ªõn.
# ======================================================
from abc import ABC, abstractmethod


# -----------------------------
# 1. Abstraction c∆° b·∫£n
# -----------------------------
class Animal(ABC):
    @abstractmethod
    def speak(self):
        pass


# -----------------------------
# 2. Class Dog d√πng Encapsulation
# -----------------------------
class Dog(Animal):
    def __init__(self, name, age):
        self.__name = name
        self.__age = age

    def speak(self):
        print(f"{self.__name} says G√¢u g√¢u!")

    def get_name(self):
        return self.__name

    def set_name(self, new_name):
        if new_name:
            self.__name = new_name


# -----------------------------
# 3. V√≠ d·ª• th·ª±c t·∫ø t·∫°i Tiki/Shopee ‚Äì User info
# -----------------------------
class User:
    def __init__(self, username, email, password):
        self.__username = username
        self.__email = email
        self.__password = password

    def get_username(self):
        return self.__username

    def check_password(self, input_pw):
        return self.__password == input_pw

    def change_password(self, old_pw, new_pw):
        if self.check_password(old_pw):
            self.__password = new_pw
            print("‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng.")
        else:
            print("‚ùå M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng.")


# -----------------------------
# 4. Fintech Vi·ªát Nam ‚Äì BankAccount (MoMo, ZaloPay, Timo)
# -----------------------------
class BankAccount:
    def __init__(self, account_number, balance):
        self.__account_number = account_number
        self.__balance = balance

    def deposit(self, amount):
        if amount > 0:
            self.__balance += amount
            print(f"‚úÖ N·∫°p {amount}. S·ªë d∆∞ m·ªõi: {self.__balance}")
        else:
            print("‚ùå S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá")

    def withdraw(self, amount):
        if 0 < amount <= self.__balance:
            self.__balance -= amount
            print(f"‚úÖ R√∫t {amount}. S·ªë d∆∞ c√≤n l·∫°i: {self.__balance}")
        else:
            print("‚ùå Kh√¥ng ƒë·ªß ti·ªÅn ho·∫∑c s·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá")

    def get_balance(self):
        return self.__balance


# -----------------------------
# 5. AWS ‚Äì EC2 Instance Manager
# -----------------------------
class EC2Instance:
    def __init__(self, instance_id, region):
        self.__instance_id = instance_id
        self.__region = region
        self.__status = "stopped"

    def start_instance(self):
        if self.__status != "running":
            self.__status = "running"
            print(f"üü¢ Instance {self.__instance_id} is now running.")
        else:
            print("‚ö†Ô∏è Instance ƒë√£ ch·∫°y r·ªìi.")

    def stop_instance(self):
        if self.__status != "stopped":
            self.__status = "stopped"
            print(f"üî¥ Instance {self.__instance_id} has stopped.")
        else:
            print("‚ö†Ô∏è Instance ƒë√£ d·ª´ng r·ªìi.")

    def get_status(self):
        return self.__status


# -----------------------------
# 6. OpenAI ‚Äì Token Usage Quota
# -----------------------------
class OpenAITokenManager:
    def __init__(self, api_key):
        self.__api_key = api_key
        self.__quota_used = 0

    def use_token(self, amount):
        self.__quota_used += amount
        print(f"üîê Token used: {amount}, Total used: {self.__quota_used}")

    def get_quota_used(self):
        return self.__quota_used


# -----------------------------
# 7. Microsoft Teams ‚Äì User Profile
# -----------------------------
class TeamsProfile:
    def __init__(self, display_name, employee_id):
        self.__display_name = display_name
        self.__employee_id = employee_id

    def update_name(self, new_name):
        if new_name:
            self.__display_name = new_name

    def show_profile(self):
        return {"name": self.__display_name, "employee_id": self.__employee_id}


# -----------------------------
# 8. Test to√†n b·ªô Encapsulation
# -----------------------------
if __name__ == "__main__":
    print("===== üê∂ Test: Dog =====")
    dog = Dog("Milu", 3)
    print("T√™n ban ƒë·∫ßu:", dog.get_name())
    dog.set_name("Corgi")
    dog.speak()

    print("\n===== üë§ Test: User =====")
    user = User("brian", "brian@example.com", "1234")
    print("Username:", user.get_username())
    user.change_password("wrong", "abcd")
    user.change_password("1234", "abcd")

    print("\n===== üè¶ Test: BankAccount =====")
    acc = BankAccount("VN123456", 1000000)
    acc.deposit(500000)
    acc.withdraw(300000)
    print("S·ªë d∆∞ cu·ªëi:", acc.get_balance())

    print("\n===== ‚òÅÔ∏è Test: AWS EC2 =====")
    instance = EC2Instance("i-abc123", "ap-southeast-1")
    instance.start_instance()
    instance.stop_instance()
    print("Tr·∫°ng th√°i:", instance.get_status())

    print("\n===== üîê Test: OpenAI Token =====")
    tm = OpenAITokenManager("sk-testkey")
    tm.use_token(250)
    print("Token ƒë√£ d√πng:", tm.get_quota_used())

    print("\n===== üßë‚Äçüíº Test: Teams Profile =====")
    profile = TeamsProfile("Alice", "EMP999")
    print("Tr∆∞·ªõc:", profile.show_profile())
    profile.update_name("Alice Johnson")
    print("Sau:", profile.show_profile())
