"""
    üîç  M√¥ t·∫£ b√†i to√°n:

        B·∫°n ƒë∆∞·ª£c cho hai danh s√°ch li√™n k·∫øt ƒë∆°n: List A v√† List B.
	    Nhi·ªám v·ª• l√† t√¨m n√∫t giao nhau ƒë·∫ßu ti√™n, n∆°i m√† hai danh s√°ch b·∫Øt ƒë·∫ßu chia s·∫ª
        c√πng m·ªôt chu·ªói c√°c n√∫t (t·ª©c l√† hai con tr·ªè c√πng tr·ªè t·ªõi c√πng m·ªôt node trong b·ªô nh·ªõ).
    üß† V√≠ d·ª• h√¨nh minh ho·∫°:
        List A: a1 ‚Üí a2
                        ‚Üò
                        c1 ‚Üí c2 ‚Üí c3
                        ‚Üó
        List B: b1 ‚Üí b2 ‚Üí b3
    K·∫øt qu·∫£ b·∫°n c·∫ßn tr·∫£ v·ªÅ l√† node c1, v√¨ t·ª´ ƒë√≥ tr·ªü ƒëi hai danh s√°ch c√≥ chung node.

"""


class Node:
    def __init__(self, val):
        self.val = val
        self.next = None


# H√†m t√¨m node giao nhau gi·ªØa hai danh s√°ch
def find_intersection_linked_list(head_1, head_2):
    # Ki·ªÉm tra n·∫øu m·ªôt trong hai danh s√°ch r·ªóng th√¨ ch·∫Øc ch·∫Øn kh√¥ng giao nhau
    if not head_1 or not head_2:
        return None

    # Kh·ªüi t·∫°o 2 con tr·ªè t·∫°m ƒë·ªÉ duy·ªát t·ª´ ƒë·∫ßu danh s√°ch
    p1, p2 = head_1, head_2

    # Duy·ªát ƒë·ªìng th·ªùi hai con tr·ªè
    # Khi m·ªôt con tr·ªè ƒëi h·∫øt danh s√°ch th√¨ n√≥ s·∫Ω chuy·ªÉn sang ƒë·∫ßu danh s√°ch c√≤n l·∫°i
    # N·∫øu hai danh s√°ch giao nhau, hai con tr·ªè s·∫Ω g·∫∑p nhau t·∫°i node giao
    while p1 != p2:
        p1 = p1.next if p1 else head_2
        p2 = p2.next if p2 else head_1

    # Tr·∫£ v·ªÅ node giao nhau, ho·∫∑c None n·∫øu kh√¥ng c√≥ giao nhau
    return p1  # tr·∫£ v·ªÅ p1 hay p2 ƒë·ªÅu ƒë∆∞·ª£c


# H√†m in danh s√°ch li√™n k·∫øt
def print_list(head, label):
    print(f"{label}: ", end="")
    while head:
        print(head.val, end=" -> ")
        head = head.next
    print("None")


# H√†m in k·∫øt qu·∫£ node giao nhau
def print_node(node):
    if node:
        print(f"Node giao nhau c√≥ gi√° tr·ªã: {node.val}")
    else:
        print("Kh√¥ng c√≥ node giao nhau.")


if __name__ == "__main__":
    # T·∫°o ƒëo·∫°n chung gi·ªØa hai danh s√°ch: c1 -> c2 -> c3
    c1 = Node(8)
    c2 = Node(10)
    c3 = Node(12)
    c1.next = c2
    c2.next = c3

    # T·∫°o danh s√°ch A: a1 -> a2 -> c1
    a1 = Node(3)
    a2 = Node(7)
    a1.next = a2
    a2.next = c1

    # T·∫°o danh s√°ch B: b1 -> b2 -> b3 -> c1
    b1 = Node(99)
    b2 = Node(1)
    b3 = Node(5)
    b1.next = b2
    b2.next = b3
    b3.next = c1

    # In danh s√°ch A v√† B
    print_list(a1, "Danh s√°ch A")
    print_list(b1, "Danh s√°ch B")

    # G·ªçi h√†m ki·ªÉm tra node giao nhau
    intersection = find_intersection_linked_list(a1, b1)

    # In k·∫øt qu·∫£
    print_node(intersection)
