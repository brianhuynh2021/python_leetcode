"""
    üìò Problem: Copy List with Random Pointer, tr√™n leetcode s·∫Ω l√† b√†i #138

    B·∫°n ƒë∆∞·ª£c cho m·ªôt danh s√°ch li√™n k·∫øt ƒë·∫∑c bi·ªát trong ƒë√≥ m·ªói node c√≥:
	‚Ä¢	M·ªôt tr∆∞·ªùng val (gi√° tr·ªã s·ªë nguy√™n)
	‚Ä¢	M·ªôt con tr·ªè next tr·ªè ƒë·∫øn node ti·∫øp theo
	‚Ä¢	M·ªôt con tr·ªè random c√≥ th·ªÉ tr·ªè ƒë·∫øn b·∫•t k·ª≥ node n√†o trong danh s√°ch ho·∫∑c null

    üëâ Y√™u c·∫ßu:
    T·∫°o deep copy c·ªßa danh s√°ch ‚Äî t·ª©c l√† t·∫°o ra m·ªôt danh s√°ch m·ªõi ƒë·ªôc l·∫≠p ho√†n to√†n,
    v·ªõi c√πng gi√° tr·ªã v√† c·∫•u tr√∫c li√™n k·∫øt (next v√† random) nh∆∞ danh s√°ch g·ªëc.

    Input: [[7,None],[13,0],[11,4],[10,2],[1,0]]
    Gi·∫£i th√≠ch:
	‚Ä¢	Node 0: val = 7, random = null
	‚Ä¢	Node 1: val = 13, random = node 0
	‚Ä¢	Node 2: val = 11, random = node 4
	‚Ä¢	Node 3: val = 10, random = node 2
	‚Ä¢	Node 4: val = 1, random = node 0

    7 ‚Üí 13 ‚Üí 11 ‚Üí 10 ‚Üí 1
     ‚Üë    ‚Üë      ‚Üë
     7    1      7   (random tr·ªè v·ªÅ)
    ‚úÖ V√≠ d·ª• minh h·ªça d·ªÖ hi·ªÉu nh·∫•t:

    Danh s√°ch g·ªëc:
        A(7) ‚Üí B(13) ‚Üí C(11)
        |       |       |
       [None]  [A]     [C]
    ‚úÖ Output:
    M·ªôt danh s√°ch m·ªõi c√≥:
        A'(7) ‚Üí B'(13) ‚Üí C'(11)
        |       |         |
      [None]  [A']      [C']
        ‚Ä¢	C√°c node m·ªõi ho√†n to√†n (kh√¥ng tr·ªè ƒë·∫øn node c≈©)
        ‚Ä¢	val, next, random gi·ªëng h·ªát b·∫£n g·ªëc
        ‚Ä¢	V√≠ d·ª•, n·∫øu ƒë·∫ßu v√†o l√† node c√≥ val = 7, th√¨ k·∫øt qu·∫£ l√†
        node val = 7 (m·ªõi) v·ªõi random gi·ªëng c·∫•u tr√∫c g·ªëc
    ‚∏ª
    üìå Input Constraints:
        ‚Ä¢	S·ªë node ‚â§ 1000
        ‚Ä¢	-10‚Å¥ ‚â§ Node.val ‚â§ 10‚Å¥
        ‚Ä¢	random c√≥ th·ªÉ l√† null ho·∫∑c tr·ªè v·ªÅ node b·∫•t k·ª≥ trong danh s√°ch
"""


class Node:
    def __init__(self, val, next=None, random=None):
        self.val = val
        self.next = next
        self.random = random


def copy_random_list(head):
    if not head:  # Ki·ªÉm tra danh s√°ch linkedlist c√≥ r·ªóng ko nh√©
        return None

    old_to_new = {}  # d√πng ƒë·ªÉ t·∫°o dictionary linked
    current = head  # T·∫°o bi·∫øn t·∫°m/node ƒë·∫ßu ƒë·ªÉ duy·ªát l·∫ßn 1
    while current:
        # Create a new node with current value
        copy = Node(current.val)
        old_to_new[current] = copy
        current = current.next
    # L√∫c n√†y h·∫øt v√≤ng while th·ª© nh·∫•t current = None r·ªìi nh√©
    # Ti·∫øp t·ª•c duy·ªát l·∫°i list nodes ƒë·ªÉ g√°n cho next v√† random cho list m·ªõi
    # current d∆∞·ªõi d√≤ng n√†y l√† g√°n l·∫°i b·∫±ng head, c√°c anh/ch·ªã c√≥ th·ªÉ ghi temp hay bi·∫øn duy·ªát
    # v√≤ng 2 kh√¥ng nh·∫•t thi·∫øt l·∫•y l·∫°i bi·∫øn current c√≥ th·ªÉ ghi temp/current_2/whatever
    # C√°c copy node ƒë·ªÅu c√≥ next v√† random bƒÉng None h·∫øt
    current = head

    while current:
        copy = old_to_new[
            current
        ]  # c√°i n√†y l√† deepcopy # c√°c b·∫°n xem th√™m shallowcopy ·ªü description nh√©
        copy.next = old_to_new.get(current.next)
        copy.random = old_to_new.get(current.random)
        current = current.next

    return old_to_new[head]


def print_list(head):
    current = head
    while current:
        random_val = current.random.val if current.random else None
        print(f"Node({current.val}), Random({random_val})")
        current = current.next


if __name__ == "__main__":
    # T·∫°o c√°c node
    node1 = Node(7)
    node2 = Node(13)
    node3 = Node(11)
    node4 = Node(10)
    node5 = Node(1)

    # N·ªëi next
    node1.next = node2
    node2.next = node3
    node3.next = node4
    node4.next = node5

    # G√°n random
    node1.random = None
    node2.random = node1
    node3.random = node5
    node4.random = node3
    node5.random = node1

    print("Original list:")
    print_list(node1)

    copied_head = copy_random_list(node1)

    print("\nCopied list:")
    print_list(copied_head)
